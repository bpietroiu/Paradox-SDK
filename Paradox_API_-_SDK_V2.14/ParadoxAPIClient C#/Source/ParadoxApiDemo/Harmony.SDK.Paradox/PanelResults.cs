using System;

namespace Harmony.SDK.Paradox
{
    public class PanelResults
    {
        const UInt32 E_FAIL = 0x80004005;

        const UInt32 S_PN_RESULT_PID_BASE = 0x02000000;
        const UInt32 E_PN_RESULT_PID_BASE = 0x82000000;

        // Paradox API and CMSI result codes
        public const UInt32 E_PID002A_RESULT_FAILURE = E_PN_RESULT_PID_BASE + 0x00002A00;
        public const UInt32 S_PID002A_RESULT_SUCCESS = S_PN_RESULT_PID_BASE + 0x00002A00;
        
        public const UInt32 S_PID002A_REQUEST_IN_PROGRESS = S_PID002A_RESULT_SUCCESS + 0x01;

        // TX SMS (callback message) via modem successfull
        public const UInt32 S_PID002A_SMS_CALLBACK_MODEM_SUCCESS = S_PID002A_RESULT_SUCCESS + 0x02;

        // SMS callback successfull (PCS connection has been accepted)
        public const UInt32 S_PID002A_SMS_CALLBACK_CONNECTION_SUCCESS = S_PID002A_RESULT_SUCCESS + 0x03;

        public const UInt32 E_PID002A_INVALID_COMMAND = E_PID002A_RESULT_FAILURE + 0x01;
        public const UInt32 E_PID002A_INVALID_SESSION = E_PID002A_RESULT_FAILURE + 0x02;
        public const UInt32 E_PID002A_ALREADY_CONNECTED = E_PID002A_RESULT_FAILURE + 0x08;
        public const UInt32 E_PID002A_FAILED_TO_CREATE_KEY = E_PID002A_RESULT_FAILURE + 0x09;
        public const UInt32 E_PID002A_FAILED_TO_CRYPT_PACKET = E_PID002A_RESULT_FAILURE + 0x0B;

        public const UInt32 E_PID002A_INVALID_PANEL_ID = E_PID002A_RESULT_FAILURE + 0x0C;
        public const UInt32 E_PID002A_INVALID_PANEL_NOT_CONNECTED = E_PID002A_RESULT_FAILURE + 0x0E;
        public const UInt32 E_PID002A_INVALID_COMMAND_NOT_SUPPORTED = E_PID002A_RESULT_FAILURE + 0x0F;
        public const UInt32 E_PID002A_SESSION_TIMEOUT = E_PID002A_RESULT_FAILURE + 0x10;
        public const UInt32 E_PID002A_INVALID_DATETIME_FORMAT = E_PID002A_RESULT_FAILURE + 0x11;

        // TX SMS via modem failed
        public const UInt32 E_PID002A_SMS_CALLBACK_MODEM_FAILURE = E_PID002A_RESULT_FAILURE + 0x12;

        public const UInt32 E_PID002A_SMS_CALLBACK_CONNECTION_FAILURE = E_PID002A_RESULT_FAILURE + 0x13;

        public const UInt32 E_PID002A_INVALID_EVENT_NOT_FOUND = E_PID002A_RESULT_FAILURE + 0x16;
        public const UInt32 E_PID002A_INVALID_PANEL_USER_FULL = E_PID002A_RESULT_FAILURE + 0x24;
        public const UInt32 E_PID002A_INVALID_PANEL_USER_ID = E_PID002A_RESULT_FAILURE + 0x25;
        public const UInt32 E_PID002A_INVALID_PANEL_USER_UNASSIGNED = E_PID002A_RESULT_FAILURE + 0x27;

        public const UInt32 E_PID002A_INVALID_XML_FORMAT = E_PID002A_RESULT_FAILURE + 0x28;

        public const UInt32 E_PID002A_INVALID_COM_PORT = E_PID002A_RESULT_FAILURE + 0x29;
        public const UInt32 E_PID002A_INVALID_BAUD_RATE = E_PID002A_RESULT_FAILURE + 0x2A;
        public const UInt32 E_PID002A_INVALID_IP_ADDRESS = E_PID002A_RESULT_FAILURE + 0x2B;
        public const UInt32 E_PID002A_INVALID_IP_PORT = E_PID002A_RESULT_FAILURE + 0x2C;
        public const UInt32 E_PID002A_INVALID_SITE_ID = E_PID002A_RESULT_FAILURE + 0x2D;
        public const UInt32 E_PID002A_INVALID_IP_PASSWORD = E_PID002A_RESULT_FAILURE + 0x2E;
        public const UInt32 E_PID002A_INVALID_COM_TYPE = E_PID002A_RESULT_FAILURE + 0x2F; // com type not supported
        public const UInt32 E_PID002A_INVALID_USERCODE = E_PID002A_RESULT_FAILURE + 0x30;

        public const UInt32 E_PID002A_INVALID_USER_RIGHTS = E_PID002A_RESULT_FAILURE + 0x31;

        public const UInt32 E_PID002A_COMMAND_TIMEOUT = E_PID002A_RESULT_FAILURE + 0x32;
        public const UInt32 E_PID002A_PANEL_NOT_FOUND = E_PID002A_RESULT_FAILURE + 0x33;
        public const UInt32 E_PID002A_TASK_CANCELLED = E_PID002A_RESULT_FAILURE + 0x34;
        public const UInt32 E_PID002A_NO_SYSTEM_TROUBLES = E_PID002A_RESULT_FAILURE + 0x35;

        public const UInt32 S_IP100_RESULT_SUCCESS = 0x03000000;
        public const UInt32 E_IP100_RESULT_FAILURE = 0x83000000;

        public const UInt32 E_IP100_BAD_RESULT = E_IP100_RESULT_FAILURE + 0x01;
        public const UInt32 E_IP100_WEB_PAGE_IN_USE = E_IP100_RESULT_FAILURE + 0x02;
        public const UInt32 E_IP100_BAD_USERNAME = E_IP100_RESULT_FAILURE + 0x03;
        public const UInt32 E_IP100_BAD_PASSWORD = E_IP100_RESULT_FAILURE + 0x04;
        public const UInt32 E_IP100_NEWARE_IN_USE = E_IP100_RESULT_FAILURE + 0x05;
        public const UInt32 E_IP100_COMMAND_TIMEOUT = E_IP100_RESULT_FAILURE + 0x06;
        public const UInt32 E_IP100_PACKET_FORMAT = E_IP100_RESULT_FAILURE + 0x07;
        public const UInt32 E_IP100_PACKET_LENGTH = E_IP100_RESULT_FAILURE + 0x08;
        public const UInt32 E_IP100_PACKET_STARTBYTE = E_IP100_RESULT_FAILURE + 0x09;
        public const UInt32 E_IP100_PACKET_DESTINATION = E_IP100_RESULT_FAILURE + 0x0A;
        public const UInt32 E_IP100_PACKET_WRONG_COMMAND = E_IP100_RESULT_FAILURE + 0x0B;
        public const UInt32 E_IP100_USE_CONNECT_EX = E_IP100_RESULT_FAILURE + 0x0C;
        public const UInt32 E_IP100_DATA_LENGTH = E_IP100_RESULT_FAILURE + 0x0D;
        public const UInt32 E_IP100_ACQUIRE_REFUSED = E_IP100_RESULT_FAILURE + 0x0E;
        public const UInt32 E_IP100_IPDUMP_ALREADY = E_IP100_RESULT_FAILURE + 0x10;
        public const UInt32 E_IP100_IPDUMP_TOO_MANY = E_IP100_RESULT_FAILURE + 0x11;
        public const UInt32 E_IP100_IPDUMP_NO_RIGHTS = E_IP100_RESULT_FAILURE + 0x12;
        public const UInt32 E_IP100_IPDUMP_INVALID_TYPE = E_IP100_RESULT_FAILURE + 0x13;
        public const UInt32 E_IP100_IPDUMP_CANNOT_SOCK = E_IP100_RESULT_FAILURE + 0x14;
        public const UInt32 E_IP100_USUPPORTED_ENCRYPTION = E_IP100_RESULT_FAILURE + 0x15;

        public const UInt32 E_PID0004_ERROR = E_PN_RESULT_PID_BASE + 0x00000400;
        public const UInt32 S_PID0004_RESULT = S_PN_RESULT_PID_BASE + 0x00000400;

        public const UInt32 E_PID0004_ERROR_CHECKSUM = E_PID0004_ERROR + 0x01;
        public const UInt32 E_PID0004_ERROR_PROCESSCMD = E_PID0004_ERROR + 0x02;
        public const UInt32 E_PID0004_ERROR_AUTHFAIL_PCPSWD = E_PID0004_ERROR + 0x03;
        public const UInt32 E_PID0004_ERROR_AUTHFAIL_PNLID = E_PID0004_ERROR + 0x04;
        public const UInt32 E_PID0004_ERROR_AUTHFAIL_USRID = E_PID0004_ERROR + 0x05;
        public const UInt32 E_PID0004_ERROR_AUTHFAIL_PNLREPORTING = E_PID0004_ERROR + 0x06;
        public const UInt32 E_PID0004_ERROR_AUTHFAIL_FUTUREUSE = E_PID0004_ERROR + 0x07;
        public const UInt32 E_PID0004_ERROR_WRITEPROTECTED = E_PID0004_ERROR + 0x08;
        public const UInt32 E_PID0004_ERROR_WRITEEXCEEDEDBLOCKSIZE = E_PID0004_ERROR + 0x09;
        public const UInt32 E_PID0004_ERROR_PARTITIONINLOCKOUT = E_PID0004_ERROR + 0x0A;
        public const UInt32 E_PID0004_ERROR_PANELWILLDISCONNECT = E_PID0004_ERROR + 0x0B;
        public const UInt32 E_PID0004_ERROR_PANELNOTCONNECTED = E_PID0004_ERROR + 0x0C;
        public const UInt32 E_PID0004_ERROR_PANELALREADYCONNECTED = E_PID0004_ERROR + 0x0D;
        public const UInt32 E_PID0004_ERROR_SOFTWAREOVERMODEM = E_PID0004_ERROR + 0x0E;
        public const UInt32 E_PID0004_ERROR_INVALIDBUSADDRESS = E_PID0004_ERROR + 0x0F;
        public const UInt32 E_PID0004_ERROR_CANNOTWRITETORAM = E_PID0004_ERROR + 0x10;
        public const UInt32 E_PID0004_ERROR_UPDATEFAILED = E_PID0004_ERROR + 0x11;
        public const UInt32 E_PID0004_ERROR_RECORDOUTOFRANGE = E_PID0004_ERROR + 0x12;
        public const UInt32 E_PID0004_ERROR_HASTATUSNOTSUPPORTED = E_PID0004_ERROR + 0x13;
        public const UInt32 E_PID0004_ERROR_INVALIDRECORDTYPE = E_PID0004_ERROR + 0x14;
        public const UInt32 E_PID0004_ERROR_MULTIBUSNOTSUPPORTED = E_PID0004_ERROR + 0x15;
        public const UInt32 E_PID0004_ERROR_INVALIDUSERCOUNT = E_PID0004_ERROR + 0x16;
        public const UInt32 E_PID0004_ERROR_INVALIDLABELID = E_PID0004_ERROR + 0x17;
        public const UInt32 E_PID0004_ERROR_INVALIDACTION = E_PID0004_ERROR + 0x18;
        public const UInt32 E_PID0004_ERROR_INVALIDRECEIVERID = E_PID0004_ERROR + 0x19;
        public const UInt32 E_PID0004_ERROR_PANELNOTSUPPORTED = E_PID0004_ERROR + 0x20;
        public const UInt32 E_PID0004_ERROR_INVALIDUSERCODELENGTH = E_PID0004_ERROR + 0x21;
        
        public static bool Succeeded(UInt32 Status)
        {
            return (Status & 0x80000000) == 0;
        }

        public static bool Failed(UInt32 Status)
        {
            return (Status & 0x80000000) != 0;
        }

        public static string GetResultCode(UInt32 returnValue)
        {
            if (Succeeded(returnValue))
            {
                return "SUCCESS";
            }

            switch (returnValue)
            {
                case E_FAIL: return "E_FAIL";
                case E_PID002A_INVALID_COMMAND: return "E_PID002A_INVALID_COMMAND";
                case E_PID002A_INVALID_SESSION: return "E_PID002A_INVALID_SESSION";
                case E_PID002A_ALREADY_CONNECTED: return "E_PID002A_ALREADY_CONNECTED";
                case E_PID002A_FAILED_TO_CREATE_KEY: return "E_PID002A_FAILED_TO_CREATE_KEY";
                case E_PID002A_FAILED_TO_CRYPT_PACKET: return "E_PID002A_FAILED_TO_CRYPT_PACKET";

                case E_PID002A_INVALID_PANEL_ID: return "E_PID002A_INVALID_PANEL_ID";
                case E_PID002A_INVALID_PANEL_NOT_CONNECTED: return "E_PID002A_INVALID_PANEL_NOT_CONNECTED";
                case E_PID002A_INVALID_COMMAND_NOT_SUPPORTED: return "E_PID002A_INVALID_COMMAND_NOT_SUPPORTED";
                case E_PID002A_SESSION_TIMEOUT: return "E_PID002A_SESSION_TIMEOUT";
                case E_PID002A_INVALID_DATETIME_FORMAT: return "E_PID002A_INVALID_DATETIME_FORMAT";

                case E_PID002A_SMS_CALLBACK_MODEM_FAILURE: return "E_PID002A_SMS_CALLBACK_MODEM_FAILURE";
                case E_PID002A_SMS_CALLBACK_CONNECTION_FAILURE: return "E_PID002A_SMS_CALLBACK_CONNECTION_FAILURE";

                case E_PID002A_INVALID_EVENT_NOT_FOUND: return "E_PID002A_INVALID_EVENT_NOT_FOUND";
                case E_PID002A_INVALID_PANEL_USER_FULL: return "E_PID002A_INVALID_PANEL_USER_FULL";
                case E_PID002A_INVALID_PANEL_USER_ID: return "E_PID002A_INVALID_PANEL_USER_ID";
                case E_PID002A_INVALID_PANEL_USER_UNASSIGNED: return "E_PID002A_INVALID_PANEL_USER_UNASSIGNED";

                case E_PID002A_INVALID_XML_FORMAT: return "E_PID002A_INVALID_XML_FORMAT";

                case E_PID002A_INVALID_COM_PORT: return "E_PID002A_INVALID_COM_PORT";
                case E_PID002A_INVALID_BAUD_RATE: return "E_PID002A_INVALID_BAUD_RATE";
                case E_PID002A_INVALID_IP_ADDRESS: return "E_PID002A_INVALID_IP_ADDRESS";
                case E_PID002A_INVALID_IP_PORT: return "E_PID002A_INVALID_IP_PORT";
                case E_PID002A_INVALID_SITE_ID: return "E_PID002A_INVALID_SITE_ID";
                case E_PID002A_INVALID_IP_PASSWORD: return "E_PID002A_INVALID_IP_PASSWORD";
                case E_PID002A_INVALID_COM_TYPE: return "E_PID002A_INVALID_COM_TYPE";
                case E_PID002A_INVALID_USERCODE: return "E_PID002A_INVALID_USERCODE";

                case E_PID002A_INVALID_USER_RIGHTS: return "E_PID002A_INVALID_USER_RIGHTS";

                case E_PID002A_COMMAND_TIMEOUT: return "E_PID002A_COMMAND_TIMEOUT";
                case E_PID002A_PANEL_NOT_FOUND: return "E_PID002A_PANEL_NOT_FOUND";
                case E_PID002A_TASK_CANCELLED: return "E_PID002A_TASK_CANCELLED";
                case E_PID002A_NO_SYSTEM_TROUBLES: return "E_PID002A_NO_SYSTEM_TROUBLES";

                case E_IP100_BAD_RESULT: return "E_IP100_BAD_RESULT";
                case E_IP100_WEB_PAGE_IN_USE: return "E_IP100_WEB_PAGE_IN_USE";
                case E_IP100_BAD_USERNAME: return "E_IP100_BAD_USERNAME";
                case E_IP100_BAD_PASSWORD: return "E_IP100_BAD_PASSWORD";
                case E_IP100_NEWARE_IN_USE: return "E_IP100_NEWARE_IN_USE";
                case E_IP100_COMMAND_TIMEOUT: return "E_IP100_COMMAND_TIMEOUT";
                case E_IP100_PACKET_FORMAT: return "E_IP100_PACKET_FORMAT";
                case E_IP100_PACKET_LENGTH: return "E_IP100_PACKET_LENGTH";
                case E_IP100_PACKET_STARTBYTE: return "E_IP100_PACKET_STARTBYTE";
                case E_IP100_PACKET_DESTINATION: return "E_IP100_PACKET_DESTINATION";
                case E_IP100_PACKET_WRONG_COMMAND: return "E_IP100_PACKET_WRONG_COMMAND";
                case E_IP100_USE_CONNECT_EX: return "E_IP100_USE_CONNECT_EX";
                case E_IP100_DATA_LENGTH: return "E_IP100_DATA_LENGTH";
                case E_IP100_ACQUIRE_REFUSED: return "E_IP100_ACQUIRE_REFUSED";
                case E_IP100_IPDUMP_ALREADY: return "E_IP100_IPDUMP_ALREADY";
                case E_IP100_IPDUMP_TOO_MANY: return "E_IP100_IPDUMP_TOO_MANY";
                case E_IP100_IPDUMP_NO_RIGHTS: return "E_IP100_IPDUMP_NO_RIGHTS";
                case E_IP100_IPDUMP_INVALID_TYPE: return "E_IP100_IPDUMP_INVALID_TYPE";
                case E_IP100_IPDUMP_CANNOT_SOCK: return "E_IP100_IPDUMP_CANNOT_SOCK";
                case E_IP100_USUPPORTED_ENCRYPTION: return "E_IP100_USUPPORTED_ENCRYPTION";
                    
                case E_PID0004_ERROR_CHECKSUM: return "E_PID0004_ERROR_CHECKSUM";
                case E_PID0004_ERROR_PROCESSCMD: return "E_PID0004_ERROR_PROCESSCMD";
                case E_PID0004_ERROR_AUTHFAIL_PCPSWD: return "E_PID0004_ERROR_AUTHFAIL_PCPSWD";
                case E_PID0004_ERROR_AUTHFAIL_PNLID: return "E_PID0004_ERROR_AUTHFAIL_PNLID";
                case E_PID0004_ERROR_AUTHFAIL_USRID: return "E_PID0004_ERROR_AUTHFAIL_USRID";
                case E_PID0004_ERROR_AUTHFAIL_PNLREPORTING: return "E_PID0004_ERROR_AUTHFAIL_PNLREPORTING";
                case E_PID0004_ERROR_AUTHFAIL_FUTUREUSE: return "E_PID0004_ERROR_AUTHFAIL_FUTUREUSE";
                case E_PID0004_ERROR_WRITEPROTECTED: return "E_PID0004_ERROR_WRITEPROTECTED";
                case E_PID0004_ERROR_WRITEEXCEEDEDBLOCKSIZE: return "E_PID0004_ERROR_WRITEEXCEEDEDBLOCKSIZE";
                case E_PID0004_ERROR_PARTITIONINLOCKOUT: return "E_PID0004_ERROR_PARTITIONINLOCKOUT";
                case E_PID0004_ERROR_PANELWILLDISCONNECT: return "E_PID0004_ERROR_PANELWILLDISCONNECT";
                case E_PID0004_ERROR_PANELNOTCONNECTED: return "E_PID0004_ERROR_PANELNOTCONNECTED";
                case E_PID0004_ERROR_PANELALREADYCONNECTED: return "E_PID0004_ERROR_PANELALREADYCONNECTED";
                case E_PID0004_ERROR_SOFTWAREOVERMODEM: return "E_PID0004_ERROR_SOFTWAREOVERMODEM";
                case E_PID0004_ERROR_INVALIDBUSADDRESS: return "E_PID0004_ERROR_INVALIDBUSADDRESS";
                case E_PID0004_ERROR_CANNOTWRITETORAM: return "E_PID0004_ERROR_CANNOTWRITETORAM";
                case E_PID0004_ERROR_UPDATEFAILED: return "E_PID0004_ERROR_UPDATEFAILED";
                case E_PID0004_ERROR_RECORDOUTOFRANGE: return "E_PID0004_ERROR_RECORDOUTOFRANGE";
                case E_PID0004_ERROR_HASTATUSNOTSUPPORTED: return "E_PID0004_ERROR_HASTATUSNOTSUPPORTED";
                case E_PID0004_ERROR_INVALIDRECORDTYPE: return "E_PID0004_ERROR_INVALIDRECORDTYPE";
                case E_PID0004_ERROR_MULTIBUSNOTSUPPORTED: return "E_PID0004_ERROR_MULTIBUSNOTSUPPORTED";
                case E_PID0004_ERROR_INVALIDUSERCOUNT: return "E_PID0004_ERROR_INVALIDUSERCOUNT";
                case E_PID0004_ERROR_INVALIDLABELID: return "E_PID0004_ERROR_INVALIDLABELID";
                case E_PID0004_ERROR_INVALIDACTION: return "E_PID0004_ERROR_INVALIDACTION";
                case E_PID0004_ERROR_INVALIDRECEIVERID: return "E_PID0004_ERROR_INVALIDRECEIVERID";
                case E_PID0004_ERROR_PANELNOTSUPPORTED: return "E_PID0004_ERROR_PANELNOTSUPPORTED";
                case E_PID0004_ERROR_INVALIDUSERCODELENGTH: return "E_PID0004_ERROR_INVALIDUSERCODELENGTH";

                default: return "FAILURE";
            }
        }
    }
}